{"version":3,"sources":["components/Input.js","components/Result.js","components/Keyboard.js","App.js","serviceWorker.js","index.js"],"names":["require","Input","_ref","props","Object","esm_extends","react_default","a","createElement","className","assign","type","displayName","fantas","Fantas","Result","str","value","transform","parseFloat","error","message","Keyboard","onDigitPress","allowed","useEffect","listener","e","find","d","key","window","addEventListener","removeEventListener","map","onClick","App","_useState","useState","_useState2","slicedToArray","setValue","components_Input","onChange","target","components_Result","components_Keyboard","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAGAA,EAAQ,IAER,IAAMC,EAAQ,SAAAC,GAAkB,IAAZC,EAAYC,OAAAC,EAAA,EAAAD,CAAA,GAAAF,GAC9B,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAAJ,OAAAM,OAAA,CAAOC,KAAK,QAAWR,MAK7BF,EAAMW,YAAc,QAMLX,QCfTY,EAAS,SAAIC,GAEnBd,EAAQ,IAER,IAAMe,EAAS,SAAAb,GAAe,IACxBc,EADYC,EAAYf,EAAZe,MAEhB,IACED,EAAMC,EAAQJ,EAAOK,UAAUC,WAAWF,IAAU,cACpD,MAAOG,GACPJ,EAAMI,EAAMC,QAGd,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SAAIQ,KAKVD,EAAOH,YAAc,SAMNG,QC1Bff,EAAQ,IAER,IAAMsB,EAAW,SAAApB,GAAsB,IAAnBqB,EAAmBrB,EAAnBqB,aACZC,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,MAYpD,OAVAC,oBAAU,WACR,IAAMC,EAAW,SAAAC,GACXH,EAAQI,KAAK,SAAAC,GAAC,OAAIA,EAAI,KAAOF,EAAEG,OACjCP,EAAaI,EAAEG,MAInB,OADAC,OAAOC,iBAAiB,WAAYN,GAC7B,kBAAMK,OAAOE,oBAAoB,WAAYP,KACnD,CAACF,EAASD,IAGXjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZe,EAAQU,IAAI,SAAAL,GAAC,OACZvB,EAAAC,EAAAC,cAAA,OAAKsB,IAAKD,EAAGpB,UAAU,iBAAiB0B,QAAS,kBAAMZ,EAAaM,KACjEA,OAOXP,EAASV,YAAc,WAMRU,QCfAc,MAdf,WAAe,IAAAC,EACaC,mBAAS,IADtBC,EAAAnC,OAAAoC,EAAA,EAAApC,CAAAiC,EAAA,GACNpB,EADMsB,EAAA,GACCE,EADDF,EAAA,GAGb,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACkC,EAAD,CAAOzB,MAAOA,EAAO0B,SAAU,SAAAhB,GAAC,OAAIc,EAASd,EAAEiB,OAAO3B,UACtDX,EAAAC,EAAAC,cAACqC,EAAD,CAAQ5B,MAAOA,IACfX,EAAAC,EAAAC,cAACsC,EAAD,CAAUvB,aAAc,SAAAM,GAAC,OAAIY,EAAe,OAANZ,EAAa,GAAKZ,EAAQY,SCFpDkB,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.88d33e52.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nrequire(\"./Input.css\");\n\nconst Input = ({ ...props }) => {\n  return (\n    <div className=\"Input\">\n      <input type=\"text\" {...props} />\n    </div>\n  );\n};\n\nInput.displayName = \"Input\";\n\nInput.propTypes = {\n  onChange: PropTypes.func\n};\n\nexport default Input;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Fantas from \"@staydistributed/fantas\";\n\nconst fantas = new Fantas();\n\nrequire(\"./Result.css\");\n\nconst Result = ({ value }) => {\n  let str;\n  try {\n    str = value ? fantas.transform(parseFloat(value)) : \"Start digit\";\n  } catch (error) {\n    str = error.message;\n  }\n\n  return (\n    <div className=\"Result\">\n      <p>{str}</p>\n    </div>\n  );\n};\n\nResult.displayName = \"Result\";\n\nResult.propTypes = {\n  value: PropTypes.string\n};\n\nexport default Result;\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nrequire(\"./Keyboard.css\");\n\nconst Keyboard = ({ onDigitPress }) => {\n  const allowed = [9, 8, 7, 6, 5, 4, 3, 2, 1, \".\", 0, \"CL\"];\n\n  useEffect(() => {\n    const listener = e => {\n      if (allowed.find(d => d + \"\" === e.key)) {\n        onDigitPress(e.key);\n      }\n    };\n    window.addEventListener(\"keypress\", listener);\n    return () => window.removeEventListener(\"keypress\", listener);\n  }, [allowed, onDigitPress]);\n\n  return (\n    <div className=\"Keyboard\">\n      {allowed.map(d => (\n        <div key={d} className=\"Keyboard-digit\" onClick={() => onDigitPress(d)}>\n          {d}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nKeyboard.displayName = \"Keyboard\";\n\nKeyboard.propTypes = {\n  onDigitPress: PropTypes.func\n};\n\nexport default Keyboard;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Input from \"./components/Input\";\nimport Result from \"./components/Result\";\nimport Keyboard from \"./components/Keyboard\";\n\nfunction App() {\n  const [value, setValue] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-form\">\n        <Input value={value} onChange={e => setValue(e.target.value)} />\n        <Result value={value} />\n        <Keyboard onDigitPress={d => setValue(d === \"CL\" ? \"\" : value + d)} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}